name: Update SQS Consumer Canary Versions

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update to latest canary version even if no changes detected'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-and-update:
    name: Check for Canary Updates and Update Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Check latest canary versions
        id: check-versions
        run: |
          echo "Checking for latest canary versions..."

          # Check npm registry for sqs-consumer canary versions
          NPM_LATEST=$(npm view sqs-consumer dist-tags.canary 2>/dev/null || echo "")
          echo "npm_latest=$NPM_LATEST" >> $GITHUB_OUTPUT

          # Check JSR registry for @bbc/sqs-consumer canary versions
          JSR_LATEST=$(curl -s "https://jsr.io/@bbc/sqs-consumer/meta.json" | jq -r '.latest' 2>/dev/null || echo "")
          echo "jsr_latest=$JSR_LATEST" >> $GITHUB_OUTPUT

          echo "NPM Latest Canary: $NPM_LATEST"
          echo "JSR Latest Canary: $JSR_LATEST"

      - name: Get current versions from package files
        id: current-versions
        run: |
          # Get current Node.js versions (sqs-consumer)
          NODE_CURRENT=$(grep -r '"sqs-consumer"' examples/*/package.json | head -1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+-canary\.[0-9]\+' || echo "")
          echo "node_current=$NODE_CURRENT" >> $GITHUB_OUTPUT

          # Get current Bun version (@bbc/sqs-consumer)
          BUN_CURRENT=$(grep -r '"@bbc/sqs-consumer"' examples/bun/package.json | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+-canary\.[0-9]\+' || echo "")
          echo "bun_current=$BUN_CURRENT" >> $GITHUB_OUTPUT

          # Get current Deno version (@bbc/sqs-consumer)
          DENO_CURRENT=$(grep -r '@bbc/sqs-consumer' examples/deno/deno.json | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+-canary\.[0-9]\+' || echo "")
          echo "deno_current=$DENO_CURRENT" >> $GITHUB_OUTPUT

          echo "Current versions:"
          echo "  Node.js: $NODE_CURRENT"
          echo "  Bun: $BUN_CURRENT"
          echo "  Deno: $DENO_CURRENT"

      - name: Compare versions and determine if update is needed
        id: compare-versions
        run: |
          needs_update="false"

          # Compare npm versions
          if [ "${{ steps.check-versions.outputs.npm_latest }}" != "${{ steps.current-versions.outputs.node_current }}" ]; then
            echo "Node.js version update available: ${{ steps.current-versions.outputs.node_current }} -> ${{ steps.check-versions.outputs.npm_latest }}"
            needs_update="true"
          fi

          # Compare JSR versions (Bun uses JSR via npm proxy)
          if [ "${{ steps.check-versions.outputs.jsr_latest }}" != "${{ steps.current-versions.outputs.bun_current }}" ]; then
            echo "Bun/JSR version update available: ${{ steps.current-versions.outputs.bun_current }} -> ${{ steps.check-versions.outputs.jsr_latest }}"
            needs_update="true"
          fi

          # Compare Deno versions
          if [ "${{ steps.check-versions.outputs.jsr_latest }}" != "${{ steps.current-versions.outputs.deno_current }}" ]; then
            echo "Deno version update available: ${{ steps.current-versions.outputs.deno_current }} -> ${{ steps.check-versions.outputs.jsr_latest }}"
            needs_update="true"
          fi

          echo "needs_update=$needs_update" >> $GITHUB_OUTPUT

          if [ "$needs_update" = "true" ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "update_required=true" >> $GITHUB_OUTPUT
          else
            echo "update_required=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Node.js examples (sqs-consumer)
        if: steps.compare-versions.outputs.update_required == 'true'
        run: |
          echo "Updating Node.js examples with sqs-consumer version: ${{ steps.check-versions.outputs.npm_latest }}"

          # Update all Node.js examples (excluding bun and deno)
          find examples -name "package.json" -not -path "*/bun/*" -not -path "*/deno/*" | xargs -I {} sed -i 's/"sqs-consumer": "[^"]*"/"sqs-consumer": "${{ steps.check-versions.outputs.npm_latest }}"/g' {}

      - name: Update Bun example (@bbc/sqs-consumer)
        if: steps.compare-versions.outputs.update_required == 'true'
        run: |
          echo "Updating Bun example with @bbc/sqs-consumer version: ${{ steps.check-versions.outputs.npm_latest }}"

          # Update Bun package.json with npm proxy format
          sed -i 's/"@bbc\/sqs-consumer": "[^"]*"/"@bbc\/sqs-consumer": "npm:@jsr\/bbc__sqs-consumer@${{ steps.check-versions.outputs.npm_latest }}"/g' examples/bun/package.json

      - name: Update Deno example (@bbc/sqs-consumer)
        if: steps.compare-versions.outputs.update_required == 'true'
        run: |
          echo "Updating Deno example with @bbc/sqs-consumer version: ${{ steps.check-versions.outputs.jsr_latest }}"

          # Update Deno deno.json
          sed -i 's/@bbc\/sqs-consumer@[^"]*/@bbc\/sqs-consumer@${{ steps.check-versions.outputs.jsr_latest }}/g' examples/deno/deno.json

      - name: Update lockfiles
        if: steps.compare-versions.outputs.update_required == 'true'
        run: |
          echo "Updating lockfiles..."

          # Update Node.js lockfiles
          for dir in examples/js-*/ examples/ts-*/ examples/docker/; do
            if [ -d "$dir" ] && [ -f "$dir/package-lock.json" ]; then
              echo "Updating lockfile in $dir"
              cd "$dir"
              npm install
              cd ../../
            fi
          done

          # Update Bun lockfile
          if [ -f "examples/bun/package.json" ]; then
            echo "Updating Bun lockfile"
            cd examples/bun
            bun install
            cd ../../
          fi

          # Update Deno lockfile
          if [ -f "examples/deno/deno.json" ]; then
            echo "Updating Deno lockfile"
            cd examples/deno
            deno install
            cd ../../
          fi


      - name: Create Pull Request
        if: steps.compare-versions.outputs.update_required == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update sqs-consumer to latest canary versions

            - Update sqs-consumer: ${{ steps.current-versions.outputs.node_current }} → ${{ steps.check-versions.outputs.npm_latest }}
            - Update @bbc/sqs-consumer (Bun): ${{ steps.current-versions.outputs.bun_current }} → ${{ steps.check-versions.outputs.npm_latest }}
            - Update @bbc/sqs-consumer (Deno): ${{ steps.current-versions.outputs.deno_current }} → ${{ steps.check-versions.outputs.jsr_latest }}
          branch: automated-canary-update
          delete-branch: true
          title: "chore: Update SQS Consumer to latest canary versions"
          body: |
            This PR updates the sqs-consumer packages to the latest canary versions:

            **Version Updates:**
            - **Node.js examples**: `sqs-consumer` ${{ steps.current-versions.outputs.node_current }} → ${{ steps.check-versions.outputs.npm_latest }}
            - **Bun example**: `@bbc/sqs-consumer` ${{ steps.current-versions.outputs.bun_current }} → ${{ steps.check-versions.outputs.npm_latest }}
            - **Deno example**: `@bbc/sqs-consumer` ${{ steps.current-versions.outputs.deno_current }} → ${{ steps.check-versions.outputs.jsr_latest }}

            **Changes Made:**
            - Updated all package.json files with new canary versions
            - Regenerated all lockfiles
            - Validated TypeScript compilation and basic functionality

            This update was triggered by the automated canary version check workflow.
          labels: |
            dependencies
            automated
